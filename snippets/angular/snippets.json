{
  "ng store": {
    "prefix": "ng store",
    "scope": "typescript",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { Store, Query, StoreConfig } from '@datorama/akita';",
      "import { Observable } from 'rxjs';",
      "import * as localforage from 'localforage';",
      "import { Router } from '@angular/router';",
      "import { HttpClient } from '@angular/common/http';",
      "import { ApiRes } from './api-response';",
      "",
      "export interface UserInfo {",
      "  id: string;",
      "  username: string;",
      "  create_date: Date;",
      "}",
      "",
      "export interface UserInfoState {",
      "  userinfo: UserInfo;",
      "}",
      "",
      "@Injectable({ providedIn: 'root' })",
      "@StoreConfig({ name: 'UserInfoState' })",
      "class UserInfoStore extends Store<UserInfoState> {",
      "  constructor() {",
      "    super({});",
      "  }",
      "}",
      "",
      "@Injectable({ providedIn: 'root' })",
      "export class UserInfoQuery extends Query<UserInfoState> {",
      "  constructor(",
      "    public store: UserInfoStore,",
      "    private router: Router,",
      "    private http: HttpClient",
      "  ) {",
      "    super(store);",
      "  }",
      "",
      "  async logout() {",
      "    await localforage.removeItem('token');",
      "    this.router.navigate(['/auth/login']);",
      "  }",
      "",
      "  async init() {",
      "    this.store.setLoading(true);",
      "    const res = await this.http",
      "      .get<ApiRes<UserInfo>>('/api/admin-users/userinfo')",
      "      .toPromise();",
      "    this.store.setLoading(false);",
      "",
      "    const userinfo = res.data;",
      "    this.store.update((state) => {",
      "      return {",
      "        ...state,",
      "        userinfo,",
      "      };",
      "    });",
      "  }",
      "",
      "  get userinfo() {",
      "    return this.select((state) => state.userinfo);",
      "  }",
      "",
      "  get error() {",
      "    return this.selectError();",
      "  }",
      "",
      "  get loading(): Observable<boolean> {",
      "    return this.selectLoading();",
      "  }",
      "}",
      ""
    ],
    "description": "ng store"
  },
  "ng entity": {
    "prefix": "ng entity",
    "scope": "typescript",
    "body": [
      "import { HttpClient } from '@angular/common/http';",
      "import { Injectable } from '@angular/core';",
      "import {",
      "  StoreConfig,",
      "  EntityState,",
      "  EntityStore,",
      "  QueryEntity,",
      "} from '@datorama/akita';",
      "import { ApiRes } from '@shared/api-response';",
      "import { Observable } from 'rxjs';",
      "",
      "export interface User {",
      "  id: string;",
      "  username: string;",
      "  create_date: Date;",
      "}",
      "",
      "export interface UsersState extends EntityState<User, string> {}",
      "",
      "@Injectable({ providedIn: 'root' })",
      "@StoreConfig({ name: 'UsersState', idKey: 'id' })",
      "class UsersStore extends EntityStore<UsersState> {",
      "  constructor() {",
      "    super();",
      "  }",
      "}",
      "",
      "@Injectable({ providedIn: 'root' })",
      "export class UsersQuery extends QueryEntity<UsersState> {",
      "  constructor(public store: UsersStore, private http: HttpClient) {",
      "    super(store);",
      "  }",
      "",
      "  init(users: User[]) {",
      "    this.store.set(users);",
      "  }",
      "",
      "  async create(user: Partial<User>) {",
      "    const { data } = await this.http",
      "      .post<ApiRes<User>>('/api/admin-users', user)",
      "      .toPromise();",
      "    this.store.set([data]);",
      "  }",
      "",
      "  get users() {",
      "    return this.selectAll();",
      "  }",
      "",
      "  get error() {",
      "    return this.selectError();",
      "  }",
      "",
      "  get loading(): Observable<boolean> {",
      "    return this.selectLoading();",
      "  }",
      "",
      "  async delete(id: string) {",
      "    try {",
      "      await this.http.delete(`/api/admin-users/\\${id}`).toPromise();",
      "      this.store.remove(id);",
      "    } catch (error) {",
      "      console.error(error);",
      "    }",
      "  }",
      "}",
      ""
    ],
    "description": "ng entity"
  }
}