{
  "django admin config": {
    "prefix": "django admin",
    "scope": "python",
    "body": [
      "from django.contrib import admin",
      "from django.contrib.auth import get_user_model",
      "",
      "@admin.register(get_user_model())",
      "class UserAdmin(admin.ModelAdmin):",
      "    # 哪些字段显示在管理的变更列表页面",
      "    # https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display",
      "    list_display = [",
      "        \"id\",",
      "        \"email\",",
      "        \"full_name\",",
      "        \"is_staff\",",
      "        \"is_active\",",
      "        \"date_joined\",",
      "    ]",
      "",
      "    exclude = [\"password\"]",
      "",
      "    # 哪些字段设为跳转连接",
      "    # https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display_links",
      "    list_display_links = [\"id\", \"email\"]",
      "",
      "    # 在列表上可编辑的字段",
      "    # https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_editable",
      "    list_editable = [\"is_staff\", \"is_active\"]",
      "",
      "    # 过滤器",
      "    # https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter",
      "    list_filter = [\"is_staff\", \"is_active\", \"date_joined\"]",
      "",
      "    # 搜索",
      "    search_fields = [\"email\"]",
      "",
      "",
      "class JoinTeamUserInline(admin.TabularInline):",
      "    model = TeamJoin",
      "    fields = [\"user\", \"date_joined\"]",
      "    extra = 1",
      "",
      "",
      "@admin.register(Team)",
      "class TeamAdmin(admin.ModelAdmin):",
      "    list_display = [\"id\", \"name\", \"description\", \"join_count\", \"create_at\"]",
      "    exclude = [\"create_at\"]",
      "    search_fields = [\"name\"]",
      "    list_filter = [\"create_at\"]",
      "",
      "    fieldsets = [",
      "        (\"团队信息\", {\"fields\": [\"name\", \"description\"]}),",
      "        (\"创建人\", {\"fields\": [\"create_user\"]}),",
      "    ]",
      "",
      "    inlines = [JoinTeamUserInline]",
      ""
    ],
    "description": "django admin config"
  },
  "django viewset": {
    "prefix": "django viewset",
    "scope": "python",
    "body": [
      "from django.contrib.auth.models import update_last_login",
      "from django.core import signing",
      "from django.db.models import OuterRef, Subquery",
      "from django.shortcuts import get_object_or_404, redirect",
      "from django.contrib.auth import get_user_model",
      "from rest_framework import exceptions",
      "from rest_framework import filters",
      "from rest_framework import status, viewsets",
      "from rest_framework.decorators import action",
      "from rest_framework.response import Response",
      "",
      "class UserViewSet(viewsets.ModelViewSet):",
      "    queryset = get_user_model().objects.all()",
      "",
      "    def get_queryset(self):",
      "        match self.action:",
      "            case \"teams\":",
      "                # 重置一下 action 避免递归",
      "                self.action = None",
      "                user: CustomUser = self.get_object()",
      "                self.action = \"teams\"",
      "",
      "                # 子查询，加入时间",
      "                joined_qs = user.team_join_set.filter(team=OuterRef(\"pk\")).values(",
      "                    \"date_joined\"",
      "                )[:1]",
      "                return user.teams.annotate(date_joined=Subquery(joined_qs))",
      "",
      "            case \"create_teams\":",
      "                self.action = None",
      "                user: CustomUser = self.get_object()",
      "                self.action = \"create_teams\"",
      "                return user.crete_teams.all()",
      "",
      "        return super().get_queryset()",
      "",
      "    serializer_class = UserSerializer",
      "",
      "    # 经过身份验证的用户才能访问的接口",
      "    permission_classes = [permissions.IsAuthenticated]",
      "",
      "    # 设置为None，禁用分页",
      "    # pagination_class = None",
      "",
      "    # 同时设置 查询过滤，搜索过滤和对结果进行排序",
      "    filter_backends = [filters.SearchFilter, filters.OrderingFilter]",
      "",
      "    ordering_fields = [\"date_joined\", \"id\", \"last_login\"]",
      "",
      "    def get_permissions(self):",
      "        \"\"\"",
      "        可以根据不同的接口返回不同的权限",
      "        https://www.django-rest-framework.org/api-guide/viewsets/#introspecting-viewset-actions",
      "        \"\"\"",
      "",
      "        match self.action:",
      "            case \"list\":",
      "                permission_classes = [permissions.IsAdminUser]",
      "            case \"create\":",
      "                # 只有管理员能创建新用户",
      "                # permission_classes = [permissions.IsAdminUser]",
      "",
      "                # 用户自己注册",
      "                permission_classes = []",
      "            case \"destroy\":",
      "                permission_classes = [IsSuperuser]",
      "            case _:",
      "                permission_classes = self.permission_classes",
      "",
      "        return [permission() for permission in permission_classes]",
      "",
      "    def perform_create(self, serializer):",
      "        \"\"\"",
      "        创建用户后，发送邮件",
      "        用户去邮箱点击链接验证后才能进行登录",
      "        \"\"\"",
      "        super().perform_create(serializer)",
      "        user: CustomUser = serializer.instance",
      "        user.send_email_verified(self.request)",
      "",
      "    @action(methods=[\"get\"], detail=False)",
      "    def get_userinfo(self, request: Request, *args, **kwargs):",
      "        \"\"\"返回当前登录用户的信息\"\"\"",
      "        self.kwargs[self.lookup_field] = request.user.id",
      "        return self.retrieve(request, *args, **kwargs)",
      "",
      "    @action(methods=[\"post\"], detail=False, permission_classes=[IsOwnerOrSuperuser])",
      "    def set_password(self, request: Request, *args, **kwargs):",
      "        \"\"\"修改密码\"\"\"",
      "        serializer = PasswordSerializer(",
      "            data=request.data, context={\"request\": request})",
      "        serializer.is_valid(raise_exception=True)",
      "",
      "        self.kwargs[self.lookup_field] = get_user_id(request)",
      "        user: CustomUser = self.get_object()",
      "",
      "        # 旧密码检查，超管可以强制设置",
      "        if not user.is_superuser and not user.check_password(",
      "            serializer.validated_data[\"old_password\"]",
      "        ):",
      "            raise exceptions.APIException(\"修改失败\", status.HTTP_400_BAD_REQUEST)",
      "",
      "        user.set_password(serializer.validated_data[\"password\"])",
      "        user.save(update_fields=[\"password\"])",
      "        return Response(\"修改成功\")",
      "",
      "    def update(self, request: Request, *args, **kwargs):",
      "        \"\"\"",
      "        只有post能更新用户数据，默认能使用PUT和PATCH调用这个接口",
      "        \"\"\"",
      "        if request.method != \"POST\":",
      "            raise exceptions.APIException(\"不支持的方法\", status.HTTP_404_NOT_FOUND)",
      "",
      "        return super().update(request, *args, **kwargs)",
      "",
      "    @action(methods=[\"post\"], detail=True, permission_classes=[IsOwnerOrSuperuser])",
      "    def user_update(self, request: Request, *args, **kwargs):",
      "        \"\"\"",
      "        更新用户信息 /users/<pk>/user_update",
      "        不能在这个接口修改密码",
      "        \"\"\"",
      "",
      "        if \"password\" in request.data:",
      "            raise exceptions.APIException(",
      "                \"不能有password字段\", status.HTTP_400_BAD_REQUEST)",
      "",
      "        return self.partial_update(request, *args, **kwargs)",
      "",
      "    @action(methods=[\"post\"], detail=False, permission_classes=[IsOwnerOrSuperuser])",
      "    def user_edit(self, request: Request, *args, **kwargs):",
      "        \"\"\"",
      "        用另一种post的方法来修改数据 POST /users/user_edit",
      "        \"\"\"",
      "        user_id = request.data.pop(\"id\", None)",
      "",
      "        if not user_id:",
      "            raise exceptions.APIException(",
      "                \"必须的id字段\", status.HTTP_400_BAD_REQUEST)",
      "",
      "        self.kwargs[self.lookup_field] = user_id",
      "        return self.user_update(request, *args, **kwargs)",
      "",
      "    @action(methods=[\"get\"], detail=False, permission_classes=[])",
      "    def email_verified(self, request: Request, *args, **kwargs):",
      "        \"\"\"",
      "        邮箱验证回调接口",
      "        如果token过期，可以在登陆页面重新发送验证邮件",
      "        \"\"\"",
      "        email_token = request.query_params.get(\"email_token\", None)",
      "        if not email_token:",
      "            raise exceptions.APIException(\"参数错误\", status.HTTP_400_BAD_REQUEST)",
      "",
      "        try:",
      "            signer = signing.TimestampSigner()",
      "            # token在两小时有效",
      "            data = signer.unsign_object(",
      "                email_token, max_age=timedelta(hours=2))",
      "        except signing.SignatureExpired:",
      "            # token过期，在登陆页面有 重新发送邮箱验证按钮",
      "            return redirect(\"/?email_verified=false\")",
      "",
      "        obj = get_object_or_404(self.get_queryset(),",
      "                                pk=data[\"pk\"], email=data[\"email\"])",
      "",
      "        # 已经验证直接返回",
      "        if obj.is_email_verified:",
      "            return redirect(\"/\")",
      "",
      "        obj.is_email_verified = True",
      "        obj.save(update_fields=[\"is_email_verified\"])",
      "",
      "        # 验证完成重新登录",
      "        return redirect(\"/\")",
      "",
      "    @action(methods=[\"post\"], detail=False, permission_classes=[])",
      "    def resend_email_verified(self, request: Request, *args, **kwargs):",
      "        \"\"\"重新发送邮箱验证邮件\"\"\"",
      "        serializer = ResendEmailVerifiedSerializer(data=request.data)",
      "        serializer.is_valid(raise_exception=True)",
      "        email = serializer.validated_data.get(\"email\")",
      "",
      "        user: CustomUser = get_object_or_404(self.get_queryset(), email=email)",
      "",
      "        if user.is_email_verified:",
      "            return Response(\"已经验证\")",
      "",
      "        user.send_email_verified(request)",
      "        return Response(\"以发送\")",
      "",
      "    @action(methods=[\"post\"], detail=False, permission_classes=[])",
      "    def send_reset_password(self, request: Request, *args, **kwargs):",
      "        \"\"\"发送重置密码邮件\"\"\"",
      "        serializer = ResendEmailVerifiedSerializer(data=request.data)",
      "        serializer.is_valid(raise_exception=True)",
      "",
      "        email = serializer.validated_data.get(\"email\")",
      "        user: CustomUser = get_object_or_404(self.get_queryset(), email=email)",
      "        user.send_email_reset_password(request)",
      "        return Response(\"以发送\")",
      "",
      "    @action(methods=[\"post\"], detail=False, permission_classes=[])",
      "    def reset_password(self, request: Request, *args, **kwargs):",
      "        \"\"\"重置密码\"\"\"",
      "        serializer = ResetPasswordSerializer(data=request.data)",
      "        serializer.is_valid(raise_exception=True)",
      "",
      "        password = serializer.validated_data.get(\"password\")",
      "        token = serializer.validated_data.get(\"token\")",
      "",
      "        try:",
      "            signer = signing.TimestampSigner()",
      "            data = signer.unsign_object(token, max_age=timedelta(hours=2))",
      "        except signing.SignatureExpired:",
      "            raise exceptions.APIException(",
      "                \"重置密码链接过期\", status.HTTP_400_BAD_REQUEST)",
      "",
      "        self.get_object()",
      "        obj: CustomUser = get_object_or_404(",
      "            self.get_queryset(), pk=data[\"pk\"], email=data[\"email\"]",
      "        )",
      "        obj.set_password(password)",
      "        obj.save(update_fields=[\"password\"])",
      "",
      "        return Response(\"修改成功\")"
    ],
    "description": "django viewset"
  }
}