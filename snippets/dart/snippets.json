{
  "ajanuw dart mobx": {
    "prefix": "ajanuw dart mobx",
    "scope": "dart",
    "body": [
      "import 'package:mobx/mobx.dart';\r\n",
      "part '$TM_FILENAME_BASE.g.dart';\r\n",
      "class ${1:${TM_FILENAME_BASE}} = _${1:${TM_FILENAME_BASE}} with _$${1:${TM_FILENAME_BASE}};\r\n",

      "abstract class _${1:${TM_FILENAME_BASE}} with Store {",

      "\t@observable",
      "\tint value = 0;",

      "\t@action",
      "\tvoid increment() {",
      "\t\tvalue++;",
      "\t}",

      "\t@computed",
      "\tString get valueString => 'value is $value';",
      "}"
    ]
  },
  "ajanuw dart rx subject": {
    "prefix": "ajanuw dart rx subject",
    "scope": "dart",
    "body": [
      "Stream<$2> get $1$ => _$1Subject.stream;",
      "Sink<$2> get $1Sink => _$1Subject.sink;",
      "final _$1Subject = BehaviorSubject<$2>();",
      "$2 _$1;"
    ]
  },
  "ajanuw dart rx controller": {
    "prefix": "ajanuw dart rx controller",
    "scope": "dart",
    "body": [
      "Sink<$2> get $1$ => _$1Subject.sink;",
      "final _$1Subject = StreamController<$2>();"
    ]
  },
  "ajanuw moor flutter": {
    "prefix": "ajanuw moor flutter",
    "scope": "dart",
    "body": [
      "import 'package:moor_flutter/moor_flutter.dart';\r\n",
      "part '${TM_FILENAME_BASE}.g.dart';\r\n",

      "class ${TM_FILENAME_BASE/^(.)/${1:/upcase}/}s extends Table {",
      "\tIntColumn get id => integer().autoIncrement()();",
      "\tTextColumn get name => text().withLength(min: 1, max: 50)();",
      "\tDateTimeColumn get dueDate => dateTime().nullable()();",
      "\tBoolColumn get completed => boolean().withDefault(const Constant(false))();",
      "}\r\n",

      "@UseMoor(tables: [${TM_FILENAME_BASE/^(.)/${1:/upcase}/}s], daos: [${TM_FILENAME_BASE/^(.)/${1:/upcase}/}Dao])",
      "class AppDatabase extends _\\$AppDatabase {",
      "  AppDatabase(): super(FlutterQueryExecutor.inDatabaseFolder(path: 'db.sqlite'));",
      "\t@override",
      "\tint get schemaVersion => 1;",
      "}\r\n",

      "@UseDao(tables: [${TM_FILENAME_BASE/^(.)/${1:/upcase}/}s])",
      "class ${TM_FILENAME_BASE/^(.)/${1:/upcase}/}Dao extends DatabaseAccessor<AppDatabase> with _$${TM_FILENAME_BASE/^(.)/${1:/upcase}/}DaoMixin {",
      "\tfinal AppDatabase db;",
      "\t${TM_FILENAME_BASE/^(.)/${1:/upcase}/}Dao(this.db) : super(db);",
      "\tStream<List<${TM_FILENAME_BASE/^(.)/${1:/upcase}/}>> watchAll${TM_FILENAME_BASE/^(.)/${1:/upcase}/}s() => select(${TM_FILENAME_BASE}s).watch();",
      "\tFuture<int> insert${TM_FILENAME_BASE/^(.)/${1:/upcase}/}(Insertable<${TM_FILENAME_BASE/^(.)/${1:/upcase}/}> $TM_FILENAME_BASE) => into(${TM_FILENAME_BASE}s).insert($TM_FILENAME_BASE);",
      "\tFuture<bool> update${TM_FILENAME_BASE/^(.)/${1:/upcase}/}(Insertable<${TM_FILENAME_BASE/^(.)/${1:/upcase}/}> $TM_FILENAME_BASE) => update(${TM_FILENAME_BASE}s).replace($TM_FILENAME_BASE);",
      "\tFuture<int> delete${TM_FILENAME_BASE/^(.)/${1:/upcase}/}(Insertable<${TM_FILENAME_BASE/^(.)/${1:/upcase}/}> $TM_FILENAME_BASE) => delete(${TM_FILENAME_BASE}s).delete($TM_FILENAME_BASE);",
      "}"
    ],
    "description": "create a moor_flutter snippets. useage: create a 'todo.dart' file, go to the file and enter 'ajanuw moor flutter'"
  },
  "ajanuw flutter StreamBuilder": {
    "prefix": "ajanuw flutter StreamBuilder",
    "scope": "dart",
    "body": [
      "StreamBuilder(",
      "  stream: $1,",
      "  builder: (context, AsyncSnapshot<$2> snap) {",
      "    if (snap.connectionState == ConnectionState.waiting) {",
      "      return Center(child: CircularProgressIndicator());",
      "    }",
      "    if (snap.connectionState == ConnectionState.active) {",
      "      if (snap.hasError) {",
      "        return Center(child: Text('${snap.error}'));",
      "      }",
      "      var $2 = snap.data;",
      "      return Container();",
      "    }",
      "    return SizedBox();",
      "  },",
      ")"
    ]
  },
  "ajanuw flutter FutureBuilder": {
    "prefix": "ajanuw flutter FutureBuilder",
    "scope": "dart",
    "body": [
      "FutureBuilder(",
      "  future: $1,",
      "  builder: (context, AsyncSnapshot<$2> snap) {",
      "    if (snap.connectionState == ConnectionState.waiting) {",
      "      return Center(child: CircularProgressIndicator());",
      "    }",

      "    if (snap.connectionState == ConnectionState.done) {",
      "      if (snap.hasError) {",
      "        return Center(child: Text('${snap.error}'));",
      "      }",
      "      $2 data = snap.data;",
      "      return Container();",
      "    }",
      "    return SizedBox();",
      "  },",
      ")"
    ]
  },
  "ajanuw flutter new page": {
    "prefix": "ajanuw flutter new page",
    "scope": "dart",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends StatefulWidget {",
      "  static const routeName = '/${1:${TM_FILENAME_BASE}}';",
      "  @override",
      "  _${1:${TM_FILENAME_BASE}}State createState() => _${1:${TM_FILENAME_BASE}}State();",
      "}",
      "",
      "class _${1:${TM_FILENAME_BASE}}State extends State<${1:${TM_FILENAME_BASE}}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: Text('${1:${TM_FILENAME_BASE}}'),",
      "      ),",
      "      body: Center(",
      "        child: Text('${1:${TM_FILENAME_BASE}} work.'),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "ajanuw flutter!": {
    "prefix": "ajanuw flutter!",
    "scope": "dart",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(MyApp());",
      "",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: HomePage(),",
      "    );",
      "  }",
      "}",
      "",
      "class HomePage extends StatefulWidget {",
      "  @override",
      "  _HomePageState createState() => _HomePageState();",
      "}",
      "",
      "class _HomePageState extends State<HomePage> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: Text('Home Page'),",
      "      ),",
      "      body: Center(",
      "        child: Text('home page'),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  }
}
