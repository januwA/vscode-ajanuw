{
  "dart mobx": {
    "prefix": "dart mobx",
    "scope": "dart",
    "body": [
      "import 'package:mobx/mobx.dart';\r\n",
      "part '$TM_FILENAME_BASE.g.dart';\r\n",
      "class ${1:${TM_FILENAME_BASE}} = _${1:${TM_FILENAME_BASE}} with _$${1:${TM_FILENAME_BASE}};\r\n",
      "abstract class _${1:${TM_FILENAME_BASE}} with Store {",
      "\t@observable",
      "\tint value = 0;",
      "\t@action",
      "\tvoid increment() {",
      "\t\tvalue++;",
      "\t}",
      "\t@computed",
      "\tString get valueString => 'value is $value';",
      "}"
    ]
  },
  "dart rx subject": {
    "prefix": "dart rx subject",
    "scope": "dart",
    "body": [
      "Stream<$2> get $1$ => _$1Subject.stream;",
      "Sink<$2> get $1Sink => _$1Subject.sink;",
      "final _$1Subject = BehaviorSubject<$2>();",
      "$2 _$1;"
    ]
  },
  "dart rx controller": {
    "prefix": "dart rx controller",
    "scope": "dart",
    "body": [
      "Sink<$2> get $1$ => _$1Subject.sink;",
      "final _$1Subject = StreamController<$2>();"
    ]
  },
  "flutter StreamBuilder": {
    "prefix": "flutter StreamBuilder",
    "scope": "dart",
    "body": [
      "StreamBuilder(",
      "  stream: $1,",
      "  builder: (context, AsyncSnapshot<$2> snap) {",
      "    if (snap.connectionState == ConnectionState.waiting) {",
      "      return Center(child: CircularProgressIndicator());",
      "    }",
      "    if (snap.connectionState == ConnectionState.active) {",
      "      if (snap.hasError) {",
      "        return Center(child: Text('${snap.error}'));",
      "      }",
      "      var $2 = snap.data;",
      "      return Container();",
      "    }",
      "    return SizedBox();",
      "  },",
      ")"
    ]
  },
  "flutter FutureBuilder": {
    "prefix": "flutter FutureBuilder",
    "scope": "dart",
    "body": [
      "FutureBuilder(",
      "  future: $1,",
      "  builder: (context, AsyncSnapshot<$2> snap) {",
      "    if (snap.connectionState == ConnectionState.waiting) {",
      "      return Center(child: CircularProgressIndicator());",
      "    }",
      "    if (snap.connectionState == ConnectionState.done) {",
      "      if (snap.hasError) {",
      "        return Center(child: Text('${snap.error}'));",
      "      }",
      "      $2 data = snap.data;",
      "      return Container();",
      "    }",
      "    return SizedBox();",
      "  },",
      ")"
    ]
  },
  "flutter new page": {
    "prefix": "flutter new page",
    "scope": "dart",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends StatefulWidget {",
      "  static const routeName = '/${1:${TM_FILENAME_BASE}}';",
      "  @override",
      "  _${1:${TM_FILENAME_BASE}}State createState() => _${1:${TM_FILENAME_BASE}}State();",
      "}",
      "",
      "class _${1:${TM_FILENAME_BASE}}State extends State<${1:${TM_FILENAME_BASE}}> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: Text('${1:${TM_FILENAME_BASE}}'),",
      "      ),",
      "      body: Center(",
      "        child: Text('${1:${TM_FILENAME_BASE}} work.'),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "flutter!": {
    "prefix": "flutter!",
    "scope": "dart",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "void main() => runApp(MyApp());",
      "",
      "class MyApp extends StatelessWidget {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return MaterialApp(",
      "      home: HomePage(),",
      "    );",
      "  }",
      "}",
      "",
      "class HomePage extends StatefulWidget {",
      "  @override",
      "  _HomePageState createState() => _HomePageState();",
      "}",
      "",
      "class _HomePageState extends State<HomePage> {",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: Text('Home Page'),",
      "      ),",
      "      body: Center(",
      "        child: Text('home page'),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "flutter GeneralDialog": {
    "prefix": "flutter GeneralDialog",
    "scope": "dart",
    "body": [
      "showGeneralDialog(",
      "  context: context,",
      "  barrierDismissible: true,",
      "  barrierColor: Color(0x80000000),",
      "  barrierLabel: 'Dismiss',",
      "  transitionDuration: Duration(milliseconds: 300),",
      "  transitionBuilder: (",
      "    BuildContext context,",
      "    Animation<double> animation,",
      "    Animation<double> secondaryAnimation,",
      "    Widget child,",
      "  ) {",
      "    var tween =",
      "        Tween(begin: Offset(0, 1), end: Offset(0, 0.8));",
      "    return SlideTransition(",
      "      position: tween.animate(",
      "        CurvedAnimation(",
      "          parent: animation,",
      "          curve: Curves.easeOut,",
      "        ),",
      "      ),",
      "      child: child,",
      "    );",
      "  },",
      "  pageBuilder: (",
      "    BuildContext context,",
      "    Animation<double> animation,",
      "    Animation<double> secondaryAnimation,",
      "  ) {",
      "    return FlutterGeneralDialog(",
      "      padding: EdgeInsets.all(4),",
      "      child: Padding(",
      "        padding: const EdgeInsets.fromLTRB(18, 18, 18, 0),",
      "        child: Column(",
      "          crossAxisAlignment: CrossAxisAlignment.stretch,",
      "          children: <Widget>[",
      "            Text(",
      "              'Dialog title ?',",
      "              style: TextStyle(",
      "                fontSize: 18,",
      "                fontWeight: FontWeight.bold,",
      "              ),",
      "            ),",
      "            SizedBox(height: 10),",
      "            ButtonBar(",
      "              children: <Widget>[",
      "                FlatButton(",
      "                  onPressed: () =>",
      "                      Navigator.of(context).pop(),",
      "                  child: Text('OK'),",
      "                ),",
      "              ],",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  },",
      ");"
    ]
  },
  "flutter AlertDialog": {
    "prefix": "flutter AlertDialog",
    "scope": "dart",
    "body": [
      "showDialog<void>(",
      "    context: context,",
      "    barrierDismissible: false, // user must tap button!",
      "    builder: (BuildContext context) {",
      "      return AlertDialog(",
      "        title: Text('Rewind and remember'),",
      "        content: SingleChildScrollView(",
      "          child: ListBody(",
      "            children: <Widget>[",
      "              Text('You will never be satisfied.'),",
      "              Text('You\\'re like me. I’m never satisfied.'),",
      "            ],",
      "          ),",
      "        ),",
      "        actions: <Widget>[",
      "          FlatButton(",
      "            child: Text('Regret'),",
      "            onPressed: () {",
      "              Navigator.of(context).pop();",
      "            },",
      "          ),",
      "        ],",
      "      );",
      "    },",
      "  );"
    ]
  },
  "flutter SimpleDialog": {
    "prefix": "flutter SimpleDialog",
    "scope": "dart",
    "body": [
      "switch (await showDialog<Department>(",
      "    context: context,",
      "    builder: (BuildContext context) {",
      "      return SimpleDialog(",
      "        title: const Text('Select assignment'),",
      "        children: <Widget>[",
      "          SimpleDialogOption(",
      "            onPressed: () { Navigator.pop(context, Department.treasury); },",
      "            child: const Text('Treasury department'),",
      "          ),",
      "          SimpleDialogOption(",
      "            onPressed: () { Navigator.pop(context, Department.state); },",
      "            child: const Text('State department'),",
      "          ),",
      "        ],",
      "      );",
      "    }",
      "  )) {",
      "    case Department.treasury:",
      "      // Let's go.",
      "      // ...",
      "    break;",
      "    case Department.state:",
      "      // ...",
      "    break;",
      "  }"
    ]
  },
  "flutter form": {
    "prefix": "flutter form",
    "scope": "dart",
    "body": [
      "TextEditingController _nameController = TextEditingController();",
      "TextEditingController _pwdController = TextEditingController();",
      "GlobalKey<FormState> _formKey = GlobalKey<FormState>();",
      "",
      "Form(",
      "  /// 设置globalKey，用于后面获取FormState",
      "  key: _formKey,",
      "",
      "  /// 当为true时，每一个子FormField内容发生变化时都会自动校验合法性，并直接显示错误信息。否则，需要通过调用FormState.validate()来手动校验",
      "  autovalidate: true,",
      "",
      "  /// 为true，则会返回到上一个路由。此属性通常用于拦截返回按钮。",
      "  onWillPop: () async {",
      "    return false;",
      "  },",
      "",
      "  /// Form的任意一个子FormField内容发生变化时会触发此回调",
      "  onChanged: () {},",
      "  child: Column(",
      "    children: <Widget>[",
      "      TextFormField(",
      "        autofocus: true,",
      "        controller: _nameController,",
      "        decoration: InputDecoration(",
      "          labelText: \"用户名\",",
      "          hintText: \"用户名或邮箱\",",
      "          icon: Icon(",
      "            Icons.person,",
      "            color: Theme.of(context).primaryColor,",
      "          ),",
      "        ),",
      "        validator: (String v) {",
      "          return v.trim().length > 4 ? null : \"用户名不能为空\";",
      "        },",
      "      ),",
      "      TextFormField(",
      "        controller: _pwdController,",
      "        decoration: InputDecoration(",
      "          labelText: \"密码\",",
      "          hintText: \"您的登录密码\",",
      "          icon: Icon(",
      "            Icons.lock,",
      "            color: Theme.of(context).primaryColor,",
      "          ),",
      "        ),",
      "        obscureText: true, // 是否隐藏正在编辑的文本（例如，用于密码）",
      "        //校验密码",
      "        validator: (String v) {",
      "          return v.trim().length > 5 ? null : \"密码不能少于6位\";",
      "        },",
      "      ),",
      "      RaisedButton(",
      "        onPressed: () {",
      "          /// 检查表单是否有效",
      "          if (_formKey.currentState.validate()) {",
      "            print('login');",
      "            print({",
      "              \"name\": _nameController.text,",
      "              \"pwd\": _pwdController.text,",
      "            });",
      "          }",
      "        },",
      "        child: Text('登陆'),",
      "      ),",
      "    ],",
      "  ),",
      ")"
    ]
  },
  "flutter input": {
    "prefix": "flutter input",
    "scope": "dart",
    "body": [
      "TextField(",
      "  controller: controller,",
      "",
      "  // textAlignVertical: TextAlignVertical.top, // 控制光标位置，默认居中的",
      "",
      "  /// 是否填充父容器，通常在flex布局中使用",
      "  // expands: false,",
      "",
      "  /// 设置null为多行输入(textarea)，默认为1",
      "  // maxLines: null,",
      "",
      "  /// 定义此窗口小部件的键盘焦点",
      "  // focusNode: nodeOne,",
      "",
      "  /// 从TextField中检索输入信息",
      "  // onChanged: (String text) {",
      "  //   print(text);",
      "  // },",
      "",
      "  /// 当用户指示他们已完成编辑字段中的文本时调用",
      "  // onSubmitted: (String text) {",
      "  //   // 移动焦点",
      "  //   FocusScope.of(context).requestFocus(nodeTwo);",
      "  // },",
      "",
      "  /// 当按下完成动作时，例如“完成”，“开始”，“发送”或“搜索”，用户的内容被提交给[控制器]，然后放弃焦点",
      "  // onEditingComplete: () {},",
      "",
      "  /// 自动对焦",
      "  // autofocus: true,",
      "",
      "  /// 键盘类型",
      "  // keyboardType: TextInputType.number,",
      "",
      "  /// “完成”按钮被“搜索”按钮替换",
      "  // textInputAction: TextInputAction.search,",
      "",
      "  /// 是否启用自动更正, 键盘提示",
      "  // autocorrect: true,",
      "",
      "  /// 配置平台键盘如何选择大写或小写键盘，仅支持文本键盘",
      "  // textCapitalization: TextCapitalization.characters,",
      "",
      "  /// TextField内的文本对齐方式",
      "  // textAlign: TextAlign.end,",
      "",
      "  /// 在TextField中设置文本样式",
      "  // style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold),",
      "",
      "  /// 更改TextField中的光标",
      "  // cursorColor: Colors.pink[300],",
      "  // cursorWidth: 4,",
      "  // cursorRadius: Radius.circular(4.0),",
      "",
      "  /// 是否显示光标",
      "  // showCursor: false,",
      "",
      "  /// 控制最大字符数",
      "  // maxLength: 12,",
      "",
      "  /// 是否隐藏正在编辑的文本（例如，用于密码）",
      "  // obscureText: true,",
      "",
      "  /// 装饰TextField",
      "  // decoration: InputDecoration.collapsed(hintText: 'Placeholder'), // 此类输入装饰不包含边框",
      "  decoration: InputDecoration(",
      "    labelText: '密码',",
      "",
      "    // 占位符",
      "    hintText: 'Placeholder',",
      "",
      "    // 持久提示消息",
      "    helperText: 'search',",
      "    counterText: 'aaaa',",
      "",
      "    icon: Icon(Icons.home),",
      "    prefix: Icon(Icons.verified_user),",
      "    // 为TextField提供边框",
      "    border: OutlineInputBorder(),",
      "  ),",
      ")"
    ]
  },
  "flutter dash page": {
    "prefix": "flutter dash page",
    "scope": "dart",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class Dash extends StatefulWidget {",
      "  static const routeName = '/Dash';",
      "  @override",
      "  _DashState createState() => _DashState();",
      "}",
      "",
      "class _DashState extends State<Dash> {",
      "  int _currentIndex = 0;",
      "  final PageController _controller = PageController();",
      "",
      "  @override",
      "  void dispose() {",
      "    super.dispose();",
      "    _controller.dispose();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      body: PageView(",
      "        controller: _controller,",
      "        onPageChanged: (int index) {",
      "          setState(() {",
      "            _currentIndex = index;",
      "          });",
      "        },",
      "        children: <Widget>[",
      "          Center(child: Text('Home Page')),",
      "          Center(child: Text('Search Page')),",
      "          Center(child: Text('Download Page')),",
      "          Center(child: Text('More Page')),",
      "        ],",
      "      ),",
      "      bottomNavigationBar: BottomNavigationBar(",
      "        type: BottomNavigationBarType.fixed,",
      "        currentIndex: _currentIndex,",
      "        fixedColor: Colors.purple,",
      "        onTap: (int index) {",
      "          setState(() {",
      "            _currentIndex = index;",
      "            _controller.jumpToPage(index);",
      "          });",
      "        },",
      "        items: <BottomNavigationBarItem>[",
      "          BottomNavigationBarItem(",
      "              icon: Icon(Icons.home),",
      "              activeIcon: Icon(Icons.home),",
      "              title: Text(\"Home\")),",
      "          BottomNavigationBarItem(",
      "              icon: Icon(Icons.search),",
      "              activeIcon: Icon(Icons.search),",
      "              title: Text(\"Search\")),",
      "          BottomNavigationBarItem(",
      "              icon: Icon(Icons.file_download),",
      "              activeIcon: Icon(Icons.file_download),",
      "              title: Text(\"Search\")),",
      "          BottomNavigationBarItem(",
      "              icon: Icon(Icons.list),",
      "              activeIcon: Icon(Icons.list),",
      "              title: Text(\"More\")),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "flutter tabbar page": {
    "prefix": "flutter tabbar page",
    "scope": "dart",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class TabPage extends StatefulWidget {",
      "  static const routeName = '/TabPage';",
      "  @override",
      "  TtabPageState createState() => TtabPageState();",
      "}",
      "",
      "class TtabPageState extends State<TabPage> with SingleTickerProviderStateMixin {",
      "  final List<Tab> myTabs = <Tab>[",
      "    Tab(text: 'LEFT'),",
      "    Tab(text: 'RIGHT'),",
      "  ];",
      "  TabController _tabController;",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _tabController = TabController(vsync: this, length: myTabs.length);",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    _tabController.dispose();",
      "    super.dispose();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      /// has title",
      "      // appBar: AppBar(",
      "      //   title: Text('TabPage'),",
      "      //   bottom: TabBar(",
      "      //     controller: _tabController,",
      "      //     tabs: myTabs,",
      "      //   ),",
      "      // ),",
      "",
      "      /// not title",
      "      appBar: PreferredSize(",
      "        preferredSize: Size.fromHeight(kToolbarHeight),",
      "        child: AppBar(",
      "          flexibleSpace: SafeArea(",
      "            child: Column(",
      "              children: <Widget>[",
      "                Expanded(child: SizedBox()),",
      "                TabBar(",
      "                  controller: _tabController,",
      "                  tabs: myTabs,",
      "                ),",
      "              ],",
      "            ),",
      "          ),",
      "        ),",
      "      ),",
      "      body: TabBarView(",
      "        controller: _tabController,",
      "        children: myTabs.map((Tab tab) {",
      "          final String label = tab.text.toLowerCase();",
      "          return Center(",
      "            child: Text(",
      "              'This is the $label tab',",
      "              style: const TextStyle(fontSize: 36),",
      "            ),",
      "          );",
      "        }).toList(),",
      "      ),",
      "    );",
      "  }",
      "}"
    ]
  },
  "flutetr DatePicker": {
    "prefix": "flutetr DatePicker",
    "scope": "dart",
    "body": [
      "DateTime selectedDate = DateTime.now();",
      "final DateTime picked = await showDatePicker(",
      "  context: context,",
      "  initialDate: selectedDate,",
      "  firstDate: DateTime(2015, 8),",
      "  lastDate: DateTime(2101),",
      ");",
      "",
      "if (picked != null && picked != selectedDate) {",
      "  setState(() {",
      "    selectedDate = picked;",
      "  });",
      "}"
    ]
  }
}